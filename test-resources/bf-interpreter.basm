// a brainfuck interpreter

// sets a value to a specific value by zeroing it before writing
[@SET Aaddr Vval] [
ZERO Aaddr;
INCR Aaddr Vval;
]

// Copies the content of a cell whilst keeping the source (conservatively)
[@COPC Asrc Adst sp] [
	ALIS Atmp sp;
	COPY Asrc Adst Atmp;
	ADDP Asrc Atmp;
]

// if not equal conditional
[@IFNE addr val [scp] sp] [
ALIS tmp sp;
ALIS tmp2 sp+1;

COPY addr tmp tmp2;
ADDP addr tmp2;
WHNE tmp val [
	ZERO tmp;
	
	INLN [scp];

	INCR tmp val;
];

ZERO tmp;
]

// if equal conditional
[@IFEQ addr val [scp] sp] [
ALIS tmp sp;
ALIS sp sp+1;

IFNE addr val [
	INCR tmp 1;
] sp;

IFNE tmp 1 [scp] sp;
ZERO tmp;
]

// Gets a value from an indexable array dynamically and destructively.
// Indexable arrays require 4 zeroed cells at the start of them.
// (Although the getting behaviour requires only 3)
// At the start we use them like so: `[empty][swap][return][index] ...`.
// Where `swap` is going to be use to swap the first element,
// `index` is the index in the array we desire to get and
// `return` is a value increased every time index is decreased, effectively giving us how far away we are from the start.
// Each time we move forward we want to swap the element in from of us with the empty one at our back.
// Then move the whole structure up by one.
// This creates a kind of "glider" through memory.
// We use the same strategy to go back, but now we don't care about `return` and instead have an element to carry.
// At the end we should arrive at the start of the array like this: `[empty][swap][return][value]`.
// Where `return` should now be 0. 
[@GETD Aarray Aindex Aout] [
ADDP Aarray+3 Aindex; // sets the index

// -- going forward --
// 0 is relative to the back swap cell
BBOX Aarray+1;
ASUM 0;

ALIS Aback_swap 0;
ALIS Areturn 1;
ALIS Aindex 2;
ALIS Aelem 3;

WHNE Aindex 0 [
	DECR Aindex 1;
	INCR Areturn 1;

	ADDP Aback_swap Aelem;
	ADDP Aindex+1 Aindex;
	ADDP Areturn+1 Areturn;

	BBOX 1;
	ASUM 0;
];

// -- reached --
ALIS Avalue Aindex;
ALIS Aback_swap Aelem;
ALIS Aelem 0;

ADDP Avalue Aback_swap;

// -- going back --
WHNE Areturn 0 [
	DECR Areturn 1;

	ADDP Areturn-1 Areturn;
	ADDP Avalue-1 Avalue;

	BBOX 0;
	ASUM 1;

	ADDP Aback_swap Aelem;
];

// -- got home --
BBOX 0;
ASUM Aarray+1;

ADDP Aout Aarray+3;
]

// Adds a value to a cell in an indexable array dynamically.
// Functions like the inverse of `GETD`.
// We start like so: `[swap][return][index][value]`
// We return like so: `[swap][return][0][0] ... `
// (we omit carrying back index and value for return because they will be zero)
[@ADDD Aarray Aindex Avalue] [
ADDP Aarray+2 Aindex; // sets the index
ADDP Aarray+3 Avalue; // sets the value

// -- going forward --
// 0 is relative to the back swap cell
BBOX Aarray;
ASUM 0;

ALIS Aback_swap 0;
ALIS Areturn 1;
ALIS Aindex 2;
ALIS Avalue 3;
ALIS Aelem 4;

WHNE Aindex 0 [
	DECR Aindex 1;
	INCR Areturn 1;

	ADDP Aback_swap Aelem;
	ADDP Avalue+1 Avalue;
	ADDP Aindex+1 Aindex;
	ADDP Areturn+1 Areturn;

	BBOX 1;
	ASUM 0;
];

// -- reached --
ADDP Aelem Avalue;

ALIS Aback_swap Aelem;
ALIS Aelem 0;


// -- going back --
WHNE Areturn 0 [
	DECR Areturn 1;

	ADDP Areturn-1 Areturn;

	BBOX 0;
	ASUM 1;

	ADDP Aback_swap Aelem;
];

// -- got home --
BBOX 0;
ASUM Aarray;
]

[@convert_char Vchar Vconvert sp] [
IFEQ 0 Vchar [
	SET 0 Vconvert;
	INCR 1 1; // set flag
] sp;
]

// Gets the program from the user and puts
// it in an array from `sp`.
// Does not store non bf tokens.
// Transforms tokens into id like so:
// * `+` -> 0
// * `-` -> 1
// * `>` -> 2
// * `<` -> 3
// * `[` -> 4
// * `]` -> 5
// * `,` -> 6
// * `.` -> 7
// * end -> -1
// User input ends when they enter "!".
// This is an indexable array, this means that the array requires 3 zeroed cells
// at the start of it so that they can later be used to index into the array.
// like so: `[swap][return index][index] ...`
[@input_program sp] [
ALIS prog sp;

// so we can get back once we are done
DECR prog 1;

BBOX prog+4;
ASUM 0;

// while we don't get any characters other than '!' to end add to array.
ALIS Aflag 1;
ALIS Vappended 1;
ALIS Vexit 2;

ALIS sp 2;
WHNE Aflag Vexit [
    IN 0;

	convert_char '+' 0 sp;
	convert_char '-' 1 sp;
	convert_char '>' 2 sp;
	convert_char '<' 3 sp;
	convert_char '[' 4 sp;
	convert_char ']' 5 sp;
	convert_char ',' 6 sp;
	convert_char '.' 7 sp;

	IFEQ 0 '!' [
		ZERO 0;
		INCR Aflag Vexit;
	] sp;

	IFEQ Aflag Vappended [
		ZERO Aflag;
		BBOX 1;
		ASUM 0;
	] sp;
];
ZERO Aflag;
DECR 0 1;

RAW "<+[-<+]-"; // return to the start
ASUM prog;

ZERO prog; // remove the -1 cell
]

[main] [
ALIS Vgeneral_memory 15;
ALIS Aprog_pointer 0;
ALIS Amem_pointer 1;
ALIS Aflag 2;
ALIS Vexit 1;
ALIS Vbracket 2;
ALIS Aoperator 3;
ALIS Acell 4;
ALIS Abracket_jump 5; // used to know the pointer position when Aflag is Vbracket
ALIS sp 6;

ALIS Vmax_array_size 250;
ALIS Aprog Vgeneral_memory;
ALIS Amem Aprog+Vmax_array_size+1;

// -- loading program --
input_program Aprog;

WHNE Aflag Vexit [
	ALIS tmp sp;
	ALIS sp sp+1;

	// get the operator
	ZERO Aoperator;
	COPC Aprog_pointer tmp sp;
	GETD Aprog tmp Aoperator;

	IFEQ Aoperator 0 [ // '+'
		INCR Acell 1;
	] sp;
	IFEQ Aoperator 1 [ // '-'
		DECR Acell 1;
	] sp;
	IFEQ Aoperator 2 [ // '>'
		// set the last cell back
		COPC Amem_pointer tmp sp;
		ADDD Amem tmp Acell;

		// get the next cell
		INCR Amem_pointer 1;
		COPC Amem_pointer tmp sp;
		GETD Amem tmp Acell;
	] sp;
	IFEQ Aoperator 3 [ // '<'
		// set the last cell back
		COPC Amem_pointer tmp sp;
		ADDD Amem tmp Acell;

		// get the next cell
		DECR Amem_pointer 1; // TODO: may underflow tape pointer
		COPC Amem_pointer tmp sp;
		GETD Amem tmp Acell;
	] sp;

	// -- brackets code upcoming --
	IFEQ Aoperator 4 [ // '['
		IFEQ Acell 0 [
			ALIS Abracket_count sp;
			INCR Abracket_count 1;
			ALIS Ainvestigating_operator sp+1;
			ALIS sp sp+2;

			COPC Aprog_pointer Abracket_jump sp;

			WHNE Abracket_count 0 [
				// get the operator
				INCR Abracket_jump 1;
				COPC Abracket_jump tmp sp;
				GETD Aprog tmp Ainvestigating_operator;

				IFEQ Ainvestigating_operator 4 [ // '['
					INCR Abracket_count 1;
				] sp;

				IFEQ Ainvestigating_operator 5 [ // ']'
					DECR Abracket_count 1;
				] sp;

				// setting the operator back
				COPC Abracket_jump tmp sp;
				ADDD Aprog tmp Ainvestigating_operator;
			];

			// sets the flag
			INCR Aflag Vbracket;
		] sp;
	] sp;

	IFEQ Aoperator 5 [ // ']'
		IFNE Acell 0 [
			ALIS Abracket_count sp;
			INCR Abracket_count 1;
			ALIS Ainvestigating_operator sp+1;
			ALIS sp sp+2;

			COPC Aprog_pointer Abracket_jump sp;

			WHNE Abracket_count 0 [
				// get the operator
				DECR Abracket_jump 1;
				COPC Abracket_jump tmp sp;
				GETD Aprog tmp Ainvestigating_operator;

				IFEQ Ainvestigating_operator 4 [ // '['
					DECR Abracket_count 1;
				] sp;

				IFEQ Ainvestigating_operator 5 [ // ']'
					INCR Abracket_count 1;
				] sp;

				// setting the operator back
				COPC Abracket_jump tmp sp;
				ADDD Aprog tmp Ainvestigating_operator;
			];

			// sets the flag
			INCR Aflag Vbracket;
		] sp;
	] sp;

	IFEQ Aoperator 6 [ // ','
		IN Acell;
	] sp;
	IFEQ Aoperator 7 [ // '.'
		OUT Acell;
	] sp;

	INCR Aoperator 1;
	IFEQ Aoperator 0 [ // end (technically -1)
		INCR Aflag Vexit;
	] sp;
	DECR Aoperator 1;

	// setting the operator back
	COPC Aprog_pointer tmp sp;
	ADDD Aprog tmp Aoperator;

	IFEQ Aflag Vbracket [
		ZERO Aprog_pointer;
		ADDP Aprog_pointer Abracket_jump;
		ZERO Aflag;
	] sp;

	INCR Aprog_pointer 1;
];
]