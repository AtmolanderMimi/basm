// a better brainfuck interpreter
// follows (kinda) all advice given in the at the end of the
// syntesis chapter about making a bf interpreter
// that being:
//  [x] bulking operators,
//  [x] (and precalculating matching brackets),
//  [x] indexing elements of width 2*,
//  [x] and flipping the program array**

// This version comes in at 9028 bf operators against the 11276 of the original (when the program array is 250 cells).
// Not only that, but it is also twice as fast in all circumstances and is not limited in program size.

// *: I did not actually index by elements of width 2, but created vesrions of GETD and ADDD (GETDI and ADDDI)
// which work on a system of interweaved laces. So the program array is defined as [op][rec][op][rec][op][rec]...
// The indexing process only affects the lace specified, meaning that indexing on the reccurence lace will only shift `[rec]` cells,
// ignoring the `[op]` cells inbetween. This makes indexing ~2 as fast, since we don't need to go through the [op] cells
// which represent half of the array.
// The way this work is by multiplying the movements and positions of the flyer by the number of laces (in this case 2).
// However, this does mean that our array will be [number of laces] times bigger to accomodate the flyer having it's position farther appart.

// **: Once again, I didn't really follow my own advice, instead of actually flipping the program array,
// I simply merged the memory and program into a same array with the lacing system.
// So, the current array layout looks like this: [op][rec][mem][op][rec][mem][op][rec][mem][op][rec][mem]...
// As explained above doing so does not make the program any slower, but it does make it much smaller as this solution
// solves the underlying problem that the praking of the memory array was too far away.
// Now the parking is the same for the memory array and the program array.
// This resulted in about 3x smaller transpiled bf.
// It also inadvertendly solved another problem.
// The program array's size is no longer limited in size as it cannot overlap the memory array anymore.

[setup] [
ALIS GVplus_op 1;          // `+` -> 1
ALIS GVminus_op 2;         // `-` -> 2
ALIS GVright_tape_op 3;    // `>` -> 3
ALIS GVleft_tape_op 4;     // `<` -> 4
ALIS GVleft_bracket_op 5;  // `[` -> 5
ALIS GVright_bracket_op 6; // `]` -> 6
ALIS GVinput_op 7;         // `,` -> 7
ALIS GVoutput_op 8;        // `.` -> 8

ALIS GVnb_program_laces 2;
ALIS GVnb_memory_laces 1;
ALIS GVnb_laces GVnb_program_laces+GVnb_memory_laces;

ALIS GVprog_op_lace 0;
ALIS GVprog_rec_lace 1;
ALIS GVmem_lace 2;

ALIS GVparking 4*GVnb_laces;
]

// Sets a value to a specific value by zeroing it before writing
[@SET Aaddr Vval] [
ZERO Aaddr;
INCR Aaddr Vval;
]

// Copies the content of a cell whilst keeping the source (conservatively)
[@COPC Asrc Adst sp] [
ALIS Atmp sp;
COPY Asrc Adst Atmp;
ADDP Asrc Atmp;
]

// if not equal conditional
[@IFNE addr val [scp] sp] [
ALIS tmp sp;
ALIS tmp2 sp+1;

COPY addr tmp tmp2;
ADDP addr tmp2;
WHNE tmp val [
	ZERO tmp;
	
	INLN [scp];

	INCR tmp val;
];

ZERO tmp;
]

// if equal conditional
[@IFEQ addr val [scp] sp] [
ALIS tmp sp;
ALIS sp sp+1;

IFNE addr val [
	INCR tmp 1;
] sp;

IFNE tmp 1 [scp] sp;
ZERO tmp;
]

// Moves the assumed pointer forward
[@FASU Vval] [
BBOX Vval;
ASUM 0;
]

// Moves backward the assumed pointer
[@BASU Vval] [
BBOX 0;
ASUM Vval;
]

// Gets a value from an **interlaced** indexable array dynamically and destructively.
// The interlaced array may have any number of laces (including 1 at no overhead) which alternate at every cell.
// `Aindex` will refer to the index within the lace, not the one of the whole array.
// `Vlace` refers to which lace is selected.
// `Vnb_laces` refers to the number of expected laces in the array.
// The indexable array must have at least `3*Vnb_laces` cells of parking before the provided address.
// In function, this meta-instruction functions much like GETD, but moves `Vnb_laces` cells at a time.
// In fact, this meta-instruction can result into the exact same behaviour if there is one 1 lace.
// ignoring the cells of the intermediate cells of the other laces.
// At the start we use them like so: `[swap][return][index][value] ...` (with cells interlaced).
// And we should return like this: `[swap][return][empty][empty] ...` (with cells interlaced).
[@GETDI Aarray Aindex Vlace Vnb_laces Aout] [
// the logic behind accomodating values to work with laces is:
// take the relative address values and multiply it by the number of laces
// then index into the specific lace with Vlace (by adding Vlace)
// (same thing applies with ADDDI)

// -- seting up the base state --
// if there is 2 laces, ends up in one of this two configs:
// Vlace = 0: [empty][empty][empty][empty][index][empty]
// Vlace = 1: [empty][empty][empty][empty][empty][index]
ADDP Aarray-Vnb_laces+Vlace Aindex; // sets the index

// -- going forward --
// 0 is relative to the back swap cell
ALIS Vtmp 3*Vnb_laces;
BBOX Aarray-Vtmp+Vlace;
ASUM 0;

ALIS Aback_swap 0;
ALIS Areturn 1*Vnb_laces;
ALIS Aindex 2*Vnb_laces;
ALIS Aelem 3*Vnb_laces;

WHNE Aindex 0 [
	DECR Aindex 1;
	INCR Areturn 1;

	ADDP Aback_swap Aelem;
	ADDP Aindex+Vnb_laces Aindex;
	ADDP Areturn+Vnb_laces Areturn;

	FASU Vnb_laces;
];

// -- reached --
ALIS Avalue Aindex;
ALIS Aback_swap Aelem;
ALIS Aelem 0;

ADDP Avalue Aback_swap;

// -- going back --
WHNE Areturn 0 [
	DECR Areturn 1;

	ADDP Areturn-Vnb_laces Areturn;
	ADDP Avalue-Vnb_laces Avalue;

	BASU Vnb_laces;

	ADDP Aback_swap Aelem;
];

// -- got home --
BBOX 0;
ALIS Vtmp 3*Vnb_laces; 
ASUM Aarray-Vtmp+Vlace;

ADDP Aout Aarray-Vnb_laces+Vlace;
]

// Adds to a value a value in an **interlaced** indexable array dynamically.
// The interlaced array may have any number of laces (including 1 at no overhead) which alternate at every cell.
// `Aindex` will refer to the index within the lace, not the one of the whole array.
// `Vlace` refers to which lace is selected.
// `Vnb_laces` refers to the number of expected laces in the array.
// The indexable array must have at least `4*Vnb_laces` cells of parking before the provided address.
// In function, this meta-instruction functions much like ADDD, but moves `Vnb_laces` cells at a time,
// ignoring the cells of the intermediate cells of the other laces.
// At the start we use them like so: `[swap][return][index][value] ...` (with cells interlaced).
// And we should return like this: `[swap][return][empty][empty] ...` (with cells interlaced).
[@ADDDI Aarray Aindex Vlace Vnb_laces Avalue] [
ALIS Vtmp 2*Vnb_laces;
ADDP Aarray-Vtmp+Vlace Aindex;      // sets the index
ADDP Aarray-Vnb_laces+Vlace Avalue; // sets the value

// -- going forward --
// 0 is relative to the back swap cell
ALIS Vtmp 4*Vnb_laces;
BBOX Aarray-Vtmp+Vlace;
ASUM 0;

ALIS Aback_swap 0;
ALIS Areturn Vnb_laces;
ALIS Aindex 2*Vnb_laces;
ALIS Avalue 3*Vnb_laces;
ALIS Aelem 4*Vnb_laces;

WHNE Aindex 0 [
	DECR Aindex 1;
	INCR Areturn 1;

	ADDP Aback_swap Aelem;
	ADDP Avalue+Vnb_laces Avalue;
	ADDP Aindex+Vnb_laces Aindex;
	ADDP Areturn+Vnb_laces Areturn;

	FASU Vnb_laces;
];

// -- reached --
ADDP Aelem Avalue;

ALIS Aback_swap Aelem;
ALIS Aelem 0;


// -- going back --
WHNE Areturn 0 [
	DECR Areturn 1;

	ADDP Areturn-Vnb_laces Areturn;

	BASU Vnb_laces;

	ADDP Aback_swap Aelem;
];

// -- got home --
BBOX 0;
ALIS Vtmp 4*Vnb_laces;
ASUM Aarray-Vtmp+Vlace;
]

// This meta instruction is specific to the program inputting logic.
// The name is pretty self-explanatory:
// If the last operator was the same as the one that was just inputted, add to the reccurence of the last one
// else shift over and add a new operator bulk.
// It also creates a new operator bulk if the recurrence limit is reached if there where no limit,
// the recurrence could just wrap around.
[@add_if_same_or_shift Vchar Vconvert sp] [
// 1 less than max, because max is -1 flag
// We prefer decreasing to compare the max recurrence (underflow), because that is dynamic for different cell types
// and results in a much smaller bf file. Having to compare to 254 directly is quite expensive.
ALIS Vnegative_max_recurrence_from_0 2;
ALIS Aid 0;
ALIS Arecurrence 1;
ALIS Ainput 2;

IFEQ Ainput Vchar [ // if it is the right char
    IFEQ Aid Vconvert [ // if it can extend recurrence
		INCR Arecurrence Vnegative_max_recurrence_from_0; // n + (-n) = 0
        IFEQ Arecurrence 0 [
			DECR Arecurrence Vnegative_max_recurrence_from_0;

			ZERO Ainput;
            FASU GVnb_laces;

			INCR Arecurrence Vnegative_max_recurrence_from_0;
        ] sp;
		DECR Arecurrence Vnegative_max_recurrence_from_0;

        // reset the Aid, or sets it if we moved
        SET Aid Vconvert;
        INCR Arecurrence 1;
    ] sp;

    IFNE Aid Vconvert [
		ZERO Ainput;
        FASU GVnb_laces;
        SET Aid Vconvert;
        SET Arecurrence 1;
    ] sp;
] sp;
]

// Gets the program from the user and puts
// it in an array from `sp`.
// Does not store non bf tokens.
// Transforms tokens into id like specified in [setup].
// Alongside with the id, elements cells will be next to their recurrence.
// Creating items 2 cells wide like so: [id][recurrence]
// To avoid overflowing the recurrence index, it is capped by a constant.
// Reaching the max, will cause another block to be created.
// Brackets have no reccurence after this meta-instruction, but the reccurence will be used by calculate_bracket.
// Input/Output do not store their recurrence (will always be 0).
// User input ends when they enter "!".
// This is an indexable array, this means that the array requires has a set amount of parking determied by GVparking.
// The created array's parking starts at sp and it's contents are at sp+GVparking.
[@input_program sp] [
ALIS Aprog_parking sp;
ALIS Aprog Aprog_parking+GVparking;
ALIS sp Aprog+1;

// used to set a -1 flag at the first from last parking space
DECR Aprog-GVnb_laces 1;
BBOX Aprog;
ASUM 0;

BASU GVnb_laces;

// while we don't get any characters other than '!' to end add to array.
ALIS Aid 0;
ALIS Arecurrence 1;
ALIS Ainput 2;
ALIS Aflag 3;
ALIS Vexit 1;

ALIS sp 4;
WHNE Aflag Vexit [
    IN Ainput;

	add_if_same_or_shift '+' GVplus_op       sp;
	add_if_same_or_shift '-' GVminus_op      sp;
	add_if_same_or_shift '>' GVright_tape_op sp;
	add_if_same_or_shift '<' GVleft_tape_op  sp;

    // these below will always shift, as we don't set a recurrence to them
	IFEQ Ainput '[' [
        ZERO Ainput;
        FASU GVnb_laces;

        INCR Aid GVleft_bracket_op;
    ] sp;
	IFEQ Ainput ']' [
        ZERO Ainput;
        FASU GVnb_laces;

        INCR Aid GVright_bracket_op;
    ] sp;
	IFEQ Ainput ',' [
        ZERO Ainput;
        FASU GVnb_laces;

        INCR Aid GVinput_op;
    ] sp;
	IFEQ Ainput '.' [
        ZERO Ainput;
        FASU GVnb_laces;

        INCR Aid GVoutput_op;
    ] sp;

	IFEQ Ainput '!' [
		ZERO Ainput;
		INCR Aflag Vexit;
	] sp;
];
INCR Aflag Vexit;

BBOX 0;
// going back until we reach the -1 flag
RAW "<+[-<+]-";

ASUM Aprog-GVnb_laces;
INCR Aprog-GVnb_laces 1; // remove the -1 flag
]

// Calculates the address of matching brackets and puts them in the recurrence
[@calculate_bracket Aprog sp] [
ALIS Aoperator sp;
ALIS Abracket_address sp+1;
ALIS Ainvestigating_address sp+2;
ALIS Aflag sp+3;
ALIS Vexit 1;
ALIS Atmp sp+4;
ALIS sp sp+5;

// iterate through all operators
WHNE Aflag Vexit [
	load_operator Aprog Abracket_address Aoperator sp;
	// we reached the end
	IFEQ Aoperator 0 [
		INCR Aflag Vexit;
	] sp;

	// if '['
	// we only check for '[', not ']',
	// because in the process of finding the match for '[' we find ']' and its matching bracket
	IFEQ Aoperator GVleft_bracket_op [
		COPC Abracket_address Ainvestigating_address sp;
		ALIS Abracket_count sp;
		INCR Abracket_count 1;
		ALIS Ainvestigating_operator sp+1;
		ALIS sp sp+2;

		WHNE Abracket_count 0 [
			// get the operator
            INCR Ainvestigating_address 1;
            load_operator Aprog Ainvestigating_address Ainvestigating_operator sp;

			IFEQ Ainvestigating_operator GVleft_bracket_op [ // '['
				INCR Abracket_count 1;
			] sp;

			IFEQ Ainvestigating_operator GVright_bracket_op [ // ']'
				DECR Abracket_count 1;
			] sp;

			// TODO: add check for end of array

			// setting the operator back
            unload_operator Aprog Ainvestigating_address Ainvestigating_operator sp;
		];

		// we are done, Ainvestigating_address is at the matching ']' bracket

		// set recurrence for '['
		COPC Ainvestigating_address Atmp sp;
		unload_recurrence Aprog Abracket_address Atmp sp;

		// set recurrence for ']'
		COPC Abracket_address Atmp sp;
		unload_recurrence Aprog Ainvestigating_address Atmp sp;
		ZERO Ainvestigating_address;
	] sp;

	unload_operator Aprog Abracket_address Aoperator sp;
	INCR Abracket_address 1;
];

DECR Aflag Vexit;
ZERO Abracket_address;
]

// Loads the operator from the Aarray array at Aindex into Aout.
// Does not consume Aindex.
[@load_operator Aarray Aindex Aout sp] [
ALIS Atmp sp;
ALIS sp sp+1;

COPC Aindex Atmp sp;
GETDI Aarray Atmp GVprog_op_lace GVnb_laces Aout;
]

// Loads the recurrence from the Aarray array at Aindex into Aout.
// Does not consume Aindex.
[@load_recurrence Aarray Aindex Aout sp] [
ALIS Atmp sp;
ALIS sp sp+1;

COPC Aindex Atmp sp;
GETDI Aarray Atmp GVprog_rec_lace GVnb_laces Aout;  
]

// Unloads the operator into the Aarray at Aindex.
// Does not consumed Aindex.
[@unload_operator Aarray Aindex Ain sp] [
ALIS Atmp sp;
ALIS sp sp+1;

COPC Aindex Atmp sp;
ADDDI Aarray Atmp GVprog_op_lace GVnb_laces Ain;
]

// Unloads the operator into the Aarray at Aindex.
// Does not consumed Aindex.
[@unload_recurrence Aarray Aindex Ain sp] [
ALIS Atmp sp;
ALIS sp sp+1;

COPC Aindex Atmp sp;
ADDDI Aarray Atmp GVprog_rec_lace GVnb_laces Ain;
]

[main] [
ALIS Vgeneral_memory 20;
ALIS Aprog_pointer 0; // points to the element index, not cell index
ALIS Amem_pointer 1;
ALIS Aflag 2;
ALIS Vexit 1;
ALIS Vbracket 2;
ALIS Aoperator 3;
ALIS Arecurrence 4;
ALIS Acell 5;
ALIS Abracket_jump 6; // used to know the pointer position when Aflag is Vbracket
ALIS sp 7;

// in this "better" version, the program array and memory array are interweaved
// this solves the problem of having arrays which must not overlap, limiting the size of one
// and it also solves the problem of one of the parking of one being at the end of the other, since they now share the same array.
// cells are layed out like so: [prog_op][prog_rec][mem][prog_op][prog_rec][mem] ...
ALIS Aarray_parking Vgeneral_memory;
ALIS Aarray Aarray_parking+GVparking;

// -- loading program --
input_program Aarray_parking;
calculate_bracket Aarray sp;

WHNE Aflag Vexit [
	ALIS tmp sp;
	ALIS sp sp+1;

    // loads the operator and recurrence, this does not consume Aprog_pointer
	load_operator   Aarray Aprog_pointer Aoperator   sp;
    load_recurrence Aarray Aprog_pointer Arecurrence sp;

	IFEQ Aoperator GVplus_op [ // '+'
        COPC Arecurrence tmp sp;
		ADDP Acell tmp;
	] sp;
	IFEQ Aoperator GVminus_op [ // '-'
        COPC Arecurrence tmp sp;
		SUBP Acell tmp;
	] sp;
	IFEQ Aoperator GVright_tape_op [ // '>'
		// set the last cell back
		COPC Amem_pointer tmp sp;
		ADDDI Aarray tmp GVmem_lace GVnb_laces Acell;

		// get the next cell
        COPC Arecurrence tmp sp;
		ADDP Amem_pointer tmp;
		COPC Amem_pointer tmp sp;
		GETDI Aarray tmp GVmem_lace GVnb_laces Acell;
	] sp;
	IFEQ Aoperator GVleft_tape_op [ // '<'
		// set the last cell back
		COPC Amem_pointer tmp sp;
		ADDDI Aarray tmp GVmem_lace GVnb_laces Acell;

		// get the next cell
        COPC Arecurrence tmp sp;
		SUBP Amem_pointer tmp; // TODO: may underflow tape pointer
		COPC Amem_pointer tmp sp;
		GETDI Aarray tmp GVmem_lace GVnb_laces Acell;
	] sp;

	// -- brackets code upcoming --
	IFEQ Aoperator GVleft_bracket_op [ // '['
		IFEQ Acell 0 [
			COPC Arecurrence tmp sp;
			ADDP Abracket_jump tmp;

			// sets the flag
			INCR Aflag Vbracket;
		] sp;
	] sp;

	IFEQ Aoperator GVright_bracket_op [ // ']'
		IFNE Acell 0 [
			COPC Arecurrence tmp sp;
			ADDP Abracket_jump tmp;

			// sets the flag
			INCR Aflag Vbracket;
		] sp;
	] sp;

	IFEQ Aoperator GVinput_op [ // ','
		IN Acell;
	] sp;
	IFEQ Aoperator GVoutput_op [ // '.'
		OUT Acell;
	] sp;

	IFEQ Aoperator 0 [ // end
		INCR Aflag Vexit;
	] sp;

	// setting the operator back
    unload_operator   Aarray Aprog_pointer Aoperator   sp;
    unload_recurrence Aarray Aprog_pointer Arecurrence sp;

	IFEQ Aflag Vbracket [
		ZERO Aprog_pointer;
		ADDP Aprog_pointer Abracket_jump;
		DECR Aflag Vbracket;
	] sp;

	INCR Aprog_pointer 1;
];
]